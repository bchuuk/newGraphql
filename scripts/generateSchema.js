// scripts/generateSchema.js
import { makeExecutableSchema } from "@graphql-tools/schema"
import { printSchema } from "graphql"
import fs from "fs"
import path from "path"

// Import resolvers –±–æ–ª–æ–Ω typeDefs
import resolvers from "../src/resolvers/index.js"
import { typeDefs } from "../src/schema/typeDefs.js"

async function generateSchema() {
  try {
    console.log("üîÑ Generating GraphQL schema...")

    // Schema “Ø“Ø—Å–≥—ç—Ö
    const schema = makeExecutableSchema({
      typeDefs,
      resolvers,
    })

    // Schema-–≥ string –±–æ–ª–≥–æ—Ö
    const schemaString = printSchema(schema)

    // schema.graphql —Ñ–∞–π–ª “Ø“Ø—Å–≥—ç—Ö
    const schemaPath = path.join(process.cwd(), "src/schema/schema.graphql")

    // Directory “Ø“Ø—Å–≥—ç—Ö
    const schemaDir = path.dirname(schemaPath)
    if (!fs.existsSync(schemaDir)) {
      fs.mkdirSync(schemaDir, { recursive: true })
    }

    // –§–∞–π–ª –±–∏—á–∏—Ö
    fs.writeFileSync(schemaPath, schemaString, "utf8")

    console.log("‚úÖ Schema generated successfully!")
    console.log(`üìÅ Location: ${schemaPath}`)

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫ —Ö–∞—Ä—É—É–ª–∞—Ö
    const lines = schemaString.split("\n").length
    const types = (schemaString.match(/type \w+/g) || []).length
    const queries =
      (schemaString.match(/type Query[\s\S]*?(?=type|\Z)/g) || [""])[0].match(
        /\w+\(/g
      )?.length || 0
    const mutations =
      (schemaString.match(/type Mutation[\s\S]*?(?=type|\Z)/g) || [
        "",
      ])[0].match(/\w+\(/g)?.length || 0

    console.log(`üìä Schema Stats:`)
    console.log(`   - Lines: ${lines}`)
    console.log(`   - Types: ${types}`)
    console.log(`   - Queries: ${queries}`)
    console.log(`   - Mutations: ${mutations}`)
  } catch (error) {
    console.error("‚ùå Error generating schema:", error)
    process.exit(1)
  }
}

// Run generator
generateSchema()
